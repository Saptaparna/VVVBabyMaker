// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/home/users/phchang/public_html/analysis/www/code/VVVBabyMaker/dilepbabymaker/output_1.root", "t", "CMS3", "tas", "cms3")

#ifndef CMS3_H
#define CMS3_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class CMS3 {
 private: 
 protected: 
  unsigned int index;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  int      isData_;
  TBranch *isData_branch;
  bool     isData_isLoaded;
  float    evt_scale1fb_;
  TBranch *evt_scale1fb_branch;
  bool     evt_scale1fb_isLoaded;
  int      HLT_DoubleMu_;
  TBranch *HLT_DoubleMu_branch;
  bool     HLT_DoubleMu_isLoaded;
  int      HLT_DoubleEl_;
  TBranch *HLT_DoubleEl_branch;
  bool     HLT_DoubleEl_isLoaded;
  int      HLT_DoubleEl_DZ_;
  TBranch *HLT_DoubleEl_DZ_branch;
  bool     HLT_DoubleEl_DZ_isLoaded;
  int      HLT_DoubleEl_DZ_2_;
  TBranch *HLT_DoubleEl_DZ_2_branch;
  bool     HLT_DoubleEl_DZ_2_isLoaded;
  int      HLT_MuEG_;
  TBranch *HLT_MuEG_branch;
  bool     HLT_MuEG_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *lep_p4_;
  TBranch *lep_p4_branch;
  bool     lep_p4_isLoaded;
  vector<float> *lep_ip3d_;
  TBranch *lep_ip3d_branch;
  bool     lep_ip3d_isLoaded;
  vector<float> *lep_ip3derr_;
  TBranch *lep_ip3derr_branch;
  bool     lep_ip3derr_isLoaded;
  vector<int> *lep_isTriggerSafe_v1_;
  TBranch *lep_isTriggerSafe_v1_branch;
  bool     lep_isTriggerSafe_v1_isLoaded;
  vector<int> *lep_lostHits_;
  TBranch *lep_lostHits_branch;
  bool     lep_lostHits_isLoaded;
  vector<int> *lep_convVeto_;
  TBranch *lep_convVeto_branch;
  bool     lep_convVeto_isLoaded;
  vector<int> *lep_motherIdSS_;
  TBranch *lep_motherIdSS_branch;
  bool     lep_motherIdSS_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_3l_fo_;
  TBranch *lep_pass_VVV_cutbased_3l_fo_branch;
  bool     lep_pass_VVV_cutbased_3l_fo_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_3l_tight_;
  TBranch *lep_pass_VVV_cutbased_3l_tight_branch;
  bool     lep_pass_VVV_cutbased_3l_tight_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_fo_;
  TBranch *lep_pass_VVV_cutbased_fo_branch;
  bool     lep_pass_VVV_cutbased_fo_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_tight_;
  TBranch *lep_pass_VVV_cutbased_tight_branch;
  bool     lep_pass_VVV_cutbased_tight_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_veto_;
  TBranch *lep_pass_VVV_cutbased_veto_branch;
  bool     lep_pass_VVV_cutbased_veto_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_fo_noiso_;
  TBranch *lep_pass_VVV_cutbased_fo_noiso_branch;
  bool     lep_pass_VVV_cutbased_fo_noiso_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_tight_noiso_;
  TBranch *lep_pass_VVV_cutbased_tight_noiso_branch;
  bool     lep_pass_VVV_cutbased_tight_noiso_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_veto_noiso_;
  TBranch *lep_pass_VVV_cutbased_veto_noiso_branch;
  bool     lep_pass_VVV_cutbased_veto_noiso_isLoaded;
  vector<int> *lep_pdgId_;
  TBranch *lep_pdgId_branch;
  bool     lep_pdgId_isLoaded;
  vector<float> *lep_dxy_;
  TBranch *lep_dxy_branch;
  bool     lep_dxy_isLoaded;
  vector<float> *lep_dz_;
  TBranch *lep_dz_branch;
  bool     lep_dz_isLoaded;
  vector<float> *lep_ptRatio_;
  TBranch *lep_ptRatio_branch;
  bool     lep_ptRatio_isLoaded;
  vector<float> *lep_ptRel_;
  TBranch *lep_ptRel_branch;
  bool     lep_ptRel_isLoaded;
  vector<float> *lep_pterr_;
  TBranch *lep_pterr_branch;
  bool     lep_pterr_isLoaded;
  vector<float> *lep_relIso03EAv2_;
  TBranch *lep_relIso03EAv2_branch;
  bool     lep_relIso03EAv2_isLoaded;
  vector<float> *lep_relIso04EAv2_;
  TBranch *lep_relIso04EAv2_branch;
  bool     lep_relIso04EAv2_isLoaded;
  vector<int> *lep_tightCharge_;
  TBranch *lep_tightCharge_branch;
  bool     lep_tightCharge_isLoaded;
  vector<float> *lep_trk_pt_;
  TBranch *lep_trk_pt_branch;
  bool     lep_trk_pt_isLoaded;
  vector<int> *lep_charge_;
  TBranch *lep_charge_branch;
  bool     lep_charge_isLoaded;
  vector<float> *lep_etaSC_;
  TBranch *lep_etaSC_branch;
  bool     lep_etaSC_isLoaded;
  vector<float> *lep_MVA_;
  TBranch *lep_MVA_branch;
  bool     lep_MVA_isLoaded;
  vector<int> *lep_isFromW_;
  TBranch *lep_isFromW_branch;
  bool     lep_isFromW_isLoaded;
  vector<int> *lep_isFromZ_;
  TBranch *lep_isFromZ_branch;
  bool     lep_isFromZ_isLoaded;
  vector<int> *lep_isFromB_;
  TBranch *lep_isFromB_branch;
  bool     lep_isFromB_isLoaded;
  vector<int> *lep_isFromC_;
  TBranch *lep_isFromC_branch;
  bool     lep_isFromC_isLoaded;
  vector<int> *lep_isFromL_;
  TBranch *lep_isFromL_branch;
  bool     lep_isFromL_isLoaded;
  vector<int> *lep_isFromLF_;
  TBranch *lep_isFromLF_branch;
  bool     lep_isFromLF_isLoaded;
  vector<int> *lep_genPart_index_;
  TBranch *lep_genPart_index_branch;
  bool     lep_genPart_index_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_p4_;
  TBranch *jets_p4_branch;
  bool     jets_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_up_p4_;
  TBranch *jets_up_p4_branch;
  bool     jets_up_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_dn_p4_;
  TBranch *jets_dn_p4_branch;
  bool     jets_dn_p4_isLoaded;
  vector<float> *jets_csv_;
  TBranch *jets_csv_branch;
  bool     jets_csv_isLoaded;
  vector<float> *jets_up_csv_;
  TBranch *jets_up_csv_branch;
  bool     jets_up_csv_isLoaded;
  vector<float> *jets_dn_csv_;
  TBranch *jets_dn_csv_branch;
  bool     jets_dn_csv_isLoaded;
  float    met_pt_;
  TBranch *met_pt_branch;
  bool     met_pt_isLoaded;
  float    met_phi_;
  TBranch *met_phi_branch;
  bool     met_phi_isLoaded;
  float    met_T1CHS_miniAOD_CORE_pt_;
  TBranch *met_T1CHS_miniAOD_CORE_pt_branch;
  bool     met_T1CHS_miniAOD_CORE_pt_isLoaded;
  float    met_T1CHS_miniAOD_CORE_phi_;
  TBranch *met_T1CHS_miniAOD_CORE_phi_branch;
  bool     met_T1CHS_miniAOD_CORE_phi_isLoaded;
  float    met_T1CHS_miniAOD_CORE_up_pt_;
  TBranch *met_T1CHS_miniAOD_CORE_up_pt_branch;
  bool     met_T1CHS_miniAOD_CORE_up_pt_isLoaded;
  float    met_T1CHS_miniAOD_CORE_up_phi_;
  TBranch *met_T1CHS_miniAOD_CORE_up_phi_branch;
  bool     met_T1CHS_miniAOD_CORE_up_phi_isLoaded;
  float    met_T1CHS_miniAOD_CORE_dn_pt_;
  TBranch *met_T1CHS_miniAOD_CORE_dn_pt_branch;
  bool     met_T1CHS_miniAOD_CORE_dn_pt_isLoaded;
  float    met_T1CHS_miniAOD_CORE_dn_phi_;
  TBranch *met_T1CHS_miniAOD_CORE_dn_phi_branch;
  bool     met_T1CHS_miniAOD_CORE_dn_phi_isLoaded;
  int      firstgoodvertex_;
  TBranch *firstgoodvertex_branch;
  bool     firstgoodvertex_isLoaded;
  int      nTrueInt_;
  TBranch *nTrueInt_branch;
  bool     nTrueInt_isLoaded;
  int      nVert_;
  TBranch *nVert_branch;
  bool     nVert_isLoaded;
  int      nisoTrack_mt2_cleaned_VVV_cutbased_veto_;
  TBranch *nisoTrack_mt2_cleaned_VVV_cutbased_veto_branch;
  bool     nisoTrack_mt2_cleaned_VVV_cutbased_veto_isLoaded;
  float    weight_btagsf_;
  TBranch *weight_btagsf_branch;
  bool     weight_btagsf_isLoaded;
  float    weight_btagsf_heavy_DN_;
  TBranch *weight_btagsf_heavy_DN_branch;
  bool     weight_btagsf_heavy_DN_isLoaded;
  float    weight_btagsf_heavy_UP_;
  TBranch *weight_btagsf_heavy_UP_branch;
  bool     weight_btagsf_heavy_UP_isLoaded;
  float    weight_btagsf_light_DN_;
  TBranch *weight_btagsf_light_DN_branch;
  bool     weight_btagsf_light_DN_isLoaded;
  float    weight_btagsf_light_UP_;
  TBranch *weight_btagsf_light_UP_branch;
  bool     weight_btagsf_light_UP_isLoaded;
  float    gen_ht_;
  TBranch *gen_ht_branch;
  bool     gen_ht_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genPart_p4_;
  TBranch *genPart_p4_branch;
  bool     genPart_p4_isLoaded;
  vector<int> *genPart_motherId_;
  TBranch *genPart_motherId_branch;
  bool     genPart_motherId_isLoaded;
  vector<int> *genPart_pdgId_;
  TBranch *genPart_pdgId_branch;
  bool     genPart_pdgId_isLoaded;
  vector<int> *genPart_charge_;
  TBranch *genPart_charge_branch;
  bool     genPart_charge_isLoaded;
  vector<int> *genPart_status_;
  TBranch *genPart_status_branch;
  bool     genPart_status_isLoaded;
  int      ngenLep_;
  TBranch *ngenLep_branch;
  bool     ngenLep_isLoaded;
  int      ngenLepFromTau_;
  TBranch *ngenLepFromTau_branch;
  bool     ngenLepFromTau_isLoaded;
  int      Flag_EcalDeadCellTriggerPrimitiveFilter_;
  TBranch *Flag_EcalDeadCellTriggerPrimitiveFilter_branch;
  bool     Flag_EcalDeadCellTriggerPrimitiveFilter_isLoaded;
  int      Flag_HBHEIsoNoiseFilter_;
  TBranch *Flag_HBHEIsoNoiseFilter_branch;
  bool     Flag_HBHEIsoNoiseFilter_isLoaded;
  int      Flag_HBHENoiseFilter_;
  TBranch *Flag_HBHENoiseFilter_branch;
  bool     Flag_HBHENoiseFilter_isLoaded;
  int      Flag_badChargedCandidateFilter_;
  TBranch *Flag_badChargedCandidateFilter_branch;
  bool     Flag_badChargedCandidateFilter_isLoaded;
  int      Flag_badMuonFilter_;
  TBranch *Flag_badMuonFilter_branch;
  bool     Flag_badMuonFilter_isLoaded;
  int      Flag_eeBadScFilter_;
  TBranch *Flag_eeBadScFilter_branch;
  bool     Flag_eeBadScFilter_isLoaded;
  int      Flag_globalTightHalo2016_;
  TBranch *Flag_globalTightHalo2016_branch;
  bool     Flag_globalTightHalo2016_isLoaded;
  int      Flag_goodVertices_;
  TBranch *Flag_goodVertices_branch;
  bool     Flag_goodVertices_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const int &HLT_DoubleMu();
  const int &HLT_DoubleEl();
  const int &HLT_DoubleEl_DZ();
  const int &HLT_DoubleEl_DZ_2();
  const int &HLT_MuEG();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_ip3derr();
  const vector<int> &lep_isTriggerSafe_v1();
  const vector<int> &lep_lostHits();
  const vector<int> &lep_convVeto();
  const vector<int> &lep_motherIdSS();
  const vector<int> &lep_pass_VVV_cutbased_3l_fo();
  const vector<int> &lep_pass_VVV_cutbased_3l_tight();
  const vector<int> &lep_pass_VVV_cutbased_fo();
  const vector<int> &lep_pass_VVV_cutbased_tight();
  const vector<int> &lep_pass_VVV_cutbased_veto();
  const vector<int> &lep_pass_VVV_cutbased_fo_noiso();
  const vector<int> &lep_pass_VVV_cutbased_tight_noiso();
  const vector<int> &lep_pass_VVV_cutbased_veto_noiso();
  const vector<int> &lep_pdgId();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<float> &lep_ptRatio();
  const vector<float> &lep_ptRel();
  const vector<float> &lep_pterr();
  const vector<float> &lep_relIso03EAv2();
  const vector<float> &lep_relIso04EAv2();
  const vector<int> &lep_tightCharge();
  const vector<float> &lep_trk_pt();
  const vector<int> &lep_charge();
  const vector<float> &lep_etaSC();
  const vector<float> &lep_MVA();
  const vector<int> &lep_isFromW();
  const vector<int> &lep_isFromZ();
  const vector<int> &lep_isFromB();
  const vector<int> &lep_isFromC();
  const vector<int> &lep_isFromL();
  const vector<int> &lep_isFromLF();
  const vector<int> &lep_genPart_index();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_up_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_dn_p4();
  const vector<float> &jets_csv();
  const vector<float> &jets_up_csv();
  const vector<float> &jets_dn_csv();
  const float &met_pt();
  const float &met_phi();
  const float &met_T1CHS_miniAOD_CORE_pt();
  const float &met_T1CHS_miniAOD_CORE_phi();
  const float &met_T1CHS_miniAOD_CORE_up_pt();
  const float &met_T1CHS_miniAOD_CORE_up_phi();
  const float &met_T1CHS_miniAOD_CORE_dn_pt();
  const float &met_T1CHS_miniAOD_CORE_dn_phi();
  const int &firstgoodvertex();
  const int &nTrueInt();
  const int &nVert();
  const int &nisoTrack_mt2_cleaned_VVV_cutbased_veto();
  const float &weight_btagsf();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_light_UP();
  const float &gen_ht();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genPart_p4();
  const vector<int> &genPart_motherId();
  const vector<int> &genPart_pdgId();
  const vector<int> &genPart_charge();
  const vector<int> &genPart_status();
  const int &ngenLep();
  const int &ngenLepFromTau();
  const int &Flag_EcalDeadCellTriggerPrimitiveFilter();
  const int &Flag_HBHEIsoNoiseFilter();
  const int &Flag_HBHENoiseFilter();
  const int &Flag_badChargedCandidateFilter();
  const int &Flag_badMuonFilter();
  const int &Flag_eeBadScFilter();
  const int &Flag_globalTightHalo2016();
  const int &Flag_goodVertices();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern CMS3 cms3;
#endif

namespace tas {
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const int &HLT_DoubleMu();
  const int &HLT_DoubleEl();
  const int &HLT_DoubleEl_DZ();
  const int &HLT_DoubleEl_DZ_2();
  const int &HLT_MuEG();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_ip3derr();
  const vector<int> &lep_isTriggerSafe_v1();
  const vector<int> &lep_lostHits();
  const vector<int> &lep_convVeto();
  const vector<int> &lep_motherIdSS();
  const vector<int> &lep_pass_VVV_cutbased_3l_fo();
  const vector<int> &lep_pass_VVV_cutbased_3l_tight();
  const vector<int> &lep_pass_VVV_cutbased_fo();
  const vector<int> &lep_pass_VVV_cutbased_tight();
  const vector<int> &lep_pass_VVV_cutbased_veto();
  const vector<int> &lep_pass_VVV_cutbased_fo_noiso();
  const vector<int> &lep_pass_VVV_cutbased_tight_noiso();
  const vector<int> &lep_pass_VVV_cutbased_veto_noiso();
  const vector<int> &lep_pdgId();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<float> &lep_ptRatio();
  const vector<float> &lep_ptRel();
  const vector<float> &lep_pterr();
  const vector<float> &lep_relIso03EAv2();
  const vector<float> &lep_relIso04EAv2();
  const vector<int> &lep_tightCharge();
  const vector<float> &lep_trk_pt();
  const vector<int> &lep_charge();
  const vector<float> &lep_etaSC();
  const vector<float> &lep_MVA();
  const vector<int> &lep_isFromW();
  const vector<int> &lep_isFromZ();
  const vector<int> &lep_isFromB();
  const vector<int> &lep_isFromC();
  const vector<int> &lep_isFromL();
  const vector<int> &lep_isFromLF();
  const vector<int> &lep_genPart_index();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_up_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_dn_p4();
  const vector<float> &jets_csv();
  const vector<float> &jets_up_csv();
  const vector<float> &jets_dn_csv();
  const float &met_pt();
  const float &met_phi();
  const float &met_T1CHS_miniAOD_CORE_pt();
  const float &met_T1CHS_miniAOD_CORE_phi();
  const float &met_T1CHS_miniAOD_CORE_up_pt();
  const float &met_T1CHS_miniAOD_CORE_up_phi();
  const float &met_T1CHS_miniAOD_CORE_dn_pt();
  const float &met_T1CHS_miniAOD_CORE_dn_phi();
  const int &firstgoodvertex();
  const int &nTrueInt();
  const int &nVert();
  const int &nisoTrack_mt2_cleaned_VVV_cutbased_veto();
  const float &weight_btagsf();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_light_UP();
  const float &gen_ht();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genPart_p4();
  const vector<int> &genPart_motherId();
  const vector<int> &genPart_pdgId();
  const vector<int> &genPart_charge();
  const vector<int> &genPart_status();
  const int &ngenLep();
  const int &ngenLepFromTau();
  const int &Flag_EcalDeadCellTriggerPrimitiveFilter();
  const int &Flag_HBHEIsoNoiseFilter();
  const int &Flag_HBHENoiseFilter();
  const int &Flag_badChargedCandidateFilter();
  const int &Flag_badMuonFilter();
  const int &Flag_eeBadScFilter();
  const int &Flag_globalTightHalo2016();
  const int &Flag_goodVertices();
}
#endif
